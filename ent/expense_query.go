// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/noamcattan/geni/ent/category"
	"github.com/noamcattan/geni/ent/expense"
	"github.com/noamcattan/geni/ent/predicate"
)

// ExpenseQuery is the builder for querying Expense entities.
type ExpenseQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.Expense
	withCategory *CategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExpenseQuery builder.
func (eq *ExpenseQuery) Where(ps ...predicate.Expense) *ExpenseQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *ExpenseQuery) Limit(limit int) *ExpenseQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *ExpenseQuery) Offset(offset int) *ExpenseQuery {
	eq.offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *ExpenseQuery) Unique(unique bool) *ExpenseQuery {
	eq.unique = &unique
	return eq
}

// Order adds an order step to the query.
func (eq *ExpenseQuery) Order(o ...OrderFunc) *ExpenseQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryCategory chains the current query on the "category" edge.
func (eq *ExpenseQuery) QueryCategory() *CategoryQuery {
	query := &CategoryQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(expense.Table, expense.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, expense.CategoryTable, expense.CategoryPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Expense entity from the query.
// Returns a *NotFoundError when no Expense was found.
func (eq *ExpenseQuery) First(ctx context.Context) (*Expense, error) {
	nodes, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{expense.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *ExpenseQuery) FirstX(ctx context.Context) *Expense {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Expense ID from the query.
// Returns a *NotFoundError when no Expense ID was found.
func (eq *ExpenseQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{expense.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *ExpenseQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Expense entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Expense entity is found.
// Returns a *NotFoundError when no Expense entities are found.
func (eq *ExpenseQuery) Only(ctx context.Context) (*Expense, error) {
	nodes, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{expense.Label}
	default:
		return nil, &NotSingularError{expense.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *ExpenseQuery) OnlyX(ctx context.Context) *Expense {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Expense ID in the query.
// Returns a *NotSingularError when more than one Expense ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *ExpenseQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{expense.Label}
	default:
		err = &NotSingularError{expense.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *ExpenseQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Expenses.
func (eq *ExpenseQuery) All(ctx context.Context) ([]*Expense, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *ExpenseQuery) AllX(ctx context.Context) []*Expense {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Expense IDs.
func (eq *ExpenseQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := eq.Select(expense.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *ExpenseQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *ExpenseQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *ExpenseQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *ExpenseQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *ExpenseQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExpenseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *ExpenseQuery) Clone() *ExpenseQuery {
	if eq == nil {
		return nil
	}
	return &ExpenseQuery{
		config:       eq.config,
		limit:        eq.limit,
		offset:       eq.offset,
		order:        append([]OrderFunc{}, eq.order...),
		predicates:   append([]predicate.Expense{}, eq.predicates...),
		withCategory: eq.withCategory.Clone(),
		// clone intermediate query.
		sql:    eq.sql.Clone(),
		path:   eq.path,
		unique: eq.unique,
	}
}

// WithCategory tells the query-builder to eager-load the nodes that are connected to
// the "category" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExpenseQuery) WithCategory(opts ...func(*CategoryQuery)) *ExpenseQuery {
	query := &CategoryQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withCategory = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Expense.Query().
//		GroupBy(expense.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *ExpenseQuery) GroupBy(field string, fields ...string) *ExpenseGroupBy {
	grbuild := &ExpenseGroupBy{config: eq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(ctx), nil
	}
	grbuild.label = expense.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Expense.Query().
//		Select(expense.FieldCreateTime).
//		Scan(ctx, &v)
func (eq *ExpenseQuery) Select(fields ...string) *ExpenseSelect {
	eq.fields = append(eq.fields, fields...)
	selbuild := &ExpenseSelect{ExpenseQuery: eq}
	selbuild.label = expense.Label
	selbuild.flds, selbuild.scan = &eq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ExpenseSelect configured with the given aggregations.
func (eq *ExpenseQuery) Aggregate(fns ...AggregateFunc) *ExpenseSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *ExpenseQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eq.fields {
		if !expense.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *ExpenseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Expense, error) {
	var (
		nodes       = []*Expense{}
		_spec       = eq.querySpec()
		loadedTypes = [1]bool{
			eq.withCategory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Expense).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Expense{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withCategory; query != nil {
		if err := eq.loadCategory(ctx, query, nodes,
			func(n *Expense) { n.Edges.Category = []*Category{} },
			func(n *Expense, e *Category) { n.Edges.Category = append(n.Edges.Category, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *ExpenseQuery) loadCategory(ctx context.Context, query *CategoryQuery, nodes []*Expense, init func(*Expense), assign func(*Expense, *Category)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Expense)
	nids := make(map[int]map[*Expense]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(expense.CategoryTable)
		s.Join(joinT).On(s.C(category.FieldID), joinT.C(expense.CategoryPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(expense.CategoryPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(expense.CategoryPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Expense]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "category" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (eq *ExpenseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.fields
	if len(eq.fields) > 0 {
		_spec.Unique = eq.unique != nil && *eq.unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *ExpenseQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (eq *ExpenseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   expense.Table,
			Columns: expense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: expense.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if unique := eq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expense.FieldID)
		for i := range fields {
			if fields[i] != expense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *ExpenseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(expense.Table)
	columns := eq.fields
	if len(columns) == 0 {
		columns = expense.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.unique != nil && *eq.unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExpenseGroupBy is the group-by builder for Expense entities.
type ExpenseGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *ExpenseGroupBy) Aggregate(fns ...AggregateFunc) *ExpenseGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scans the result into the given value.
func (egb *ExpenseGroupBy) Scan(ctx context.Context, v any) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

func (egb *ExpenseGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range egb.fields {
		if !expense.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := egb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *ExpenseGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql.Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(egb.fields)+len(egb.fns))
		for _, f := range egb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(egb.fields...)...)
}

// ExpenseSelect is the builder for selecting fields of Expense entities.
type ExpenseSelect struct {
	*ExpenseQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *ExpenseSelect) Aggregate(fns ...AggregateFunc) *ExpenseSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *ExpenseSelect) Scan(ctx context.Context, v any) error {
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	es.sql = es.ExpenseQuery.sqlQuery(ctx)
	return es.sqlScan(ctx, v)
}

func (es *ExpenseSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(es.sql))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		es.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		es.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := es.sql.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
