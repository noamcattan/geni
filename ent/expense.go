// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/noamcattan/geni/ent/expense"
)

// Expense is the model entity for the Expense schema.
type Expense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExpenseQuery when eager-loading is set.
	Edges ExpenseEdges `json:"edges"`
}

// ExpenseEdges holds the relations/edges for other nodes in the graph.
type ExpenseEdges struct {
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e ExpenseEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Expense) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case expense.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case expense.FieldID:
			values[i] = new(sql.NullInt64)
		case expense.FieldDescription:
			values[i] = new(sql.NullString)
		case expense.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Expense", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Expense fields.
func (e *Expense) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case expense.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case expense.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case expense.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				e.Amount = value.Float64
			}
		case expense.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		}
	}
	return nil
}

// QueryCategory queries the "category" edge of the Expense entity.
func (e *Expense) QueryCategory() *CategoryQuery {
	return (&ExpenseClient{config: e.config}).QueryCategory(e)
}

// Update returns a builder for updating this Expense.
// Note that you need to call Expense.Unwrap() before calling this method if this Expense
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Expense) Update() *ExpenseUpdateOne {
	return (&ExpenseClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Expense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Expense) Unwrap() *Expense {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Expense is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Expense) String() string {
	var builder strings.Builder
	builder.WriteString("Expense(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", e.Amount))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Expenses is a parsable slice of Expense.
type Expenses []*Expense

func (e Expenses) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
