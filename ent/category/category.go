// Code generated by ent, DO NOT EDIT.

package category

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldQuota holds the string denoting the quota field in the database.
	FieldQuota = "quota"
	// EdgeExpenses holds the string denoting the expenses edge name in mutations.
	EdgeExpenses = "expenses"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// ExpensesTable is the table that holds the expenses relation/edge. The primary key declared below.
	ExpensesTable = "category_expenses"
	// ExpensesInverseTable is the table name for the Expense entity.
	// It exists in this package in order to avoid circular dependency with the "expense" package.
	ExpensesInverseTable = "expenses"
	// AccountTable is the table that holds the account relation/edge. The primary key declared below.
	AccountTable = "account_categories"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldQuota,
}

var (
	// ExpensesPrimaryKey and ExpensesColumn2 are the table columns denoting the
	// primary key for the expenses relation (M2M).
	ExpensesPrimaryKey = []string{"category_id", "expense_id"}
	// AccountPrimaryKey and AccountColumn2 are the table columns denoting the
	// primary key for the account relation (M2M).
	AccountPrimaryKey = []string{"account_id", "category_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
