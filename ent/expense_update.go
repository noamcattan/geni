// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/noamcattan/geni/ent/category"
	"github.com/noamcattan/geni/ent/expense"
	"github.com/noamcattan/geni/ent/predicate"
)

// ExpenseUpdate is the builder for updating Expense entities.
type ExpenseUpdate struct {
	config
	hooks    []Hook
	mutation *ExpenseMutation
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (eu *ExpenseUpdate) Where(ps ...predicate.Expense) *ExpenseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetAmount sets the "amount" field.
func (eu *ExpenseUpdate) SetAmount(f float64) *ExpenseUpdate {
	eu.mutation.ResetAmount()
	eu.mutation.SetAmount(f)
	return eu
}

// AddAmount adds f to the "amount" field.
func (eu *ExpenseUpdate) AddAmount(f float64) *ExpenseUpdate {
	eu.mutation.AddAmount(f)
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExpenseUpdate) SetDescription(s string) *ExpenseUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (eu *ExpenseUpdate) AddCategoryIDs(ids ...int) *ExpenseUpdate {
	eu.mutation.AddCategoryIDs(ids...)
	return eu
}

// AddCategory adds the "category" edges to the Category entity.
func (eu *ExpenseUpdate) AddCategory(c ...*Category) *ExpenseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCategoryIDs(ids...)
}

// Mutation returns the ExpenseMutation object of the builder.
func (eu *ExpenseUpdate) Mutation() *ExpenseMutation {
	return eu.mutation
}

// ClearCategory clears all "category" edges to the Category entity.
func (eu *ExpenseUpdate) ClearCategory() *ExpenseUpdate {
	eu.mutation.ClearCategory()
	return eu
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (eu *ExpenseUpdate) RemoveCategoryIDs(ids ...int) *ExpenseUpdate {
	eu.mutation.RemoveCategoryIDs(ids...)
	return eu
}

// RemoveCategory removes "category" edges to Category entities.
func (eu *ExpenseUpdate) RemoveCategory(c ...*Category) *ExpenseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExpenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExpenseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExpenseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExpenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   expense.Table,
			Columns: expense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: expense.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedAmount(); ok {
		_spec.AddField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(expense.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expense.CategoryTable,
			Columns: expense.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !eu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expense.CategoryTable,
			Columns: expense.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expense.CategoryTable,
			Columns: expense.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ExpenseUpdateOne is the builder for updating a single Expense entity.
type ExpenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpenseMutation
}

// SetAmount sets the "amount" field.
func (euo *ExpenseUpdateOne) SetAmount(f float64) *ExpenseUpdateOne {
	euo.mutation.ResetAmount()
	euo.mutation.SetAmount(f)
	return euo
}

// AddAmount adds f to the "amount" field.
func (euo *ExpenseUpdateOne) AddAmount(f float64) *ExpenseUpdateOne {
	euo.mutation.AddAmount(f)
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExpenseUpdateOne) SetDescription(s string) *ExpenseUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (euo *ExpenseUpdateOne) AddCategoryIDs(ids ...int) *ExpenseUpdateOne {
	euo.mutation.AddCategoryIDs(ids...)
	return euo
}

// AddCategory adds the "category" edges to the Category entity.
func (euo *ExpenseUpdateOne) AddCategory(c ...*Category) *ExpenseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCategoryIDs(ids...)
}

// Mutation returns the ExpenseMutation object of the builder.
func (euo *ExpenseUpdateOne) Mutation() *ExpenseMutation {
	return euo.mutation
}

// ClearCategory clears all "category" edges to the Category entity.
func (euo *ExpenseUpdateOne) ClearCategory() *ExpenseUpdateOne {
	euo.mutation.ClearCategory()
	return euo
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (euo *ExpenseUpdateOne) RemoveCategoryIDs(ids ...int) *ExpenseUpdateOne {
	euo.mutation.RemoveCategoryIDs(ids...)
	return euo
}

// RemoveCategory removes "category" edges to Category entities.
func (euo *ExpenseUpdateOne) RemoveCategory(c ...*Category) *ExpenseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCategoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExpenseUpdateOne) Select(field string, fields ...string) *ExpenseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Expense entity.
func (euo *ExpenseUpdateOne) Save(ctx context.Context) (*Expense, error) {
	var (
		err  error
		node *Expense
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Expense)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExpenseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExpenseUpdateOne) SaveX(ctx context.Context) *Expense {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExpenseUpdateOne) sqlSave(ctx context.Context) (_node *Expense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   expense.Table,
			Columns: expense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: expense.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expense.FieldID)
		for _, f := range fields {
			if !expense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedAmount(); ok {
		_spec.AddField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(expense.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expense.CategoryTable,
			Columns: expense.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !euo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expense.CategoryTable,
			Columns: expense.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expense.CategoryTable,
			Columns: expense.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Expense{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
